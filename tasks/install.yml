---
- name: Query GitHub for latest Radarr release details
  ansible.builtin.uri:
    url: "https://api.github.com/repos/Radarr/Radarr/releases/latest"
    follow_redirects: all
  when: radarr_version == "latest"
  register: radarr_release_details

- name: Create Radarr bin directory
  ansible.builtin.file:
    path: "{{radarr_bin_dir}}"
    owner: "{{ radarr_user }}"
    group: "{{ radarr_group }}"
    state: directory
- debug: var=radarr_release_details.json.name
- name: Install Radarr
  ansible.builtin.unarchive:
    src: |-
      {%- if radarr_release_details is skipped -%}
      https://github.com/Radarr/Radarr/releases/download/v{{radarr_version}}/Radarr.master.{{radarr_version}}.linux-core-{{radarr_release_arch}}.tar.gz
      {%- else -%}
      https://github.com/Radarr/Radarr/releases/download/v{{radarr_release_details.json.name}}/Radarr.master.{{radarr_release_details.json.name}}.linux-core-{{radarr_release_arch}}.tar.gz
      {%- endif -%}
    dest: "{{radarr_bin_dir}}"
    owner: "{{ radarr_user }}"
    group: "{{ radarr_group }}"
    remote_src: true
  when: >- 
    radarr_current_version == None
    or ((radarr_release_details is not skipped and radarr_current_version != radarr_release_details.json.name)
         and radarr_version != radarr_current_version)

- name: Update Radarr version file
  ansible.builtin.copy:
    dest: "{{radarr_version_file}}"
    content: "{{ radarr_release_details is skipped and radarr_version or radarr_release_details.json.name }}"
    owner: "{{ radarr_user }}"
    group: "{{ radarr_group }}"

- name: Install Radarr systemd service
  ansible.builtin.template:
    src: radarr.service.j2
    dest: "{{radarr_systemd_service_dir}}/radarr.service"
  notify: Restart Radarr

